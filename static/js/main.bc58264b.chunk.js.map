{"version":3,"sources":["utils/style/vars.js","utils/hooks/useInput.js","pages/index.jsx","App.jsx","utils/serviceWorker.js","index.jsx"],"names":["blue","red","green","yellow","white","light_grey","blue_grey","pink","useInput","initialValue","useState","value","setValue","setInput","useCallback","e","target","clear","getStatModifier","stat","Math","ceil","columns","title","color","vars","data","dex","weaponAbility","str","magicAbility","int","end","generateRandomFromRange","min","max","minInt","parseFloat","maxInt","round","random","Wrapper","styled","div","StyledTableRow","TableRow","HeadTableCell","TableCell","StyledTableCell","CountInput","TextField","FromInput","ToInput","GenereateButton","Button","StyledForm","form","IndexPage","React","stats","setStats","count","setCount","fromStat","setFromStat","toStat","setToStat","fromAbility","setFromAbility","toAbility","setToAbility","generateStatsHandler","preventDefault","newStats","i","push","onSubmit","label","type","onChange","onClick","variant","Table","TableHead","map","key","TableBody","item","idx","GlobalStyle","createGlobalStyle","App","CssBaseline","path","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"qSAAe,EACJ,CACPA,KAAM,UACNC,IAAK,UACLC,MAAO,UACPC,OAAQ,UACRC,MAAO,UACPC,WAAY,UACZC,UAAW,UACXC,KAAM,WCGKC,EAVE,SAACC,GAAkB,IAAD,EACPC,mBAASD,GADF,mBAC1BE,EAD0B,KACnBC,EADmB,KAG3BC,EAAWC,uBAAY,SAACC,GAAD,OAAOH,EAASG,EAAEC,OAAOL,SAAQ,IAExDM,EAAQH,uBAAY,kBAAMF,EAAS,MAAK,IAE9C,MAAO,CAACD,EAAOE,EAAUD,EAAUK,I,kkCCIrC,IAAMC,EAAkB,SAACC,GACvB,OAAOC,KAAKC,MAAMF,EAAO,IAAM,IAG3BG,EAAU,CACd,CACEC,MAAO,cACPC,MAAOC,EAAanB,UACpBoB,KAAM,YAAc,IAAXC,EAAU,EAAVA,IACP,OAAO,GAAKT,EAAgBS,KAGhC,CACEJ,MAAO,kBACPC,MAAOC,EAAalB,KACpBmB,KAAM,YAA6B,IAA1BC,EAAyB,EAAzBA,IAAKC,EAAoB,EAApBA,cACZ,OAAOV,EAAgBS,GAAOC,IAGlC,CACEL,MAAO,WACPC,MAAOC,EAAaxB,IACpByB,KAAM,gBAAGG,EAAH,EAAGA,IAAH,OAAaX,EAAgBW,KAErC,CACEN,MAAO,gBACPC,MAAOC,EAAazB,KACpB0B,KAAM,YAA4B,IAAzBI,EAAwB,EAAxBA,aAAcC,EAAU,EAAVA,IACrB,OAAOb,EAAgBa,GAAOD,IAGlC,CACEP,MAAO,SACPC,MAAOC,EAAavB,MACpBwB,KAAM,YACJ,OAAO,EADU,EAAVM,OAMPC,EAA0B,SAACC,EAAKC,GACpC,IAAMC,EAASC,WAAWH,GACpBI,EAASD,WAAWF,GAE1B,OAAOf,KAAKmB,MAAMnB,KAAKoB,UAAYF,EAASF,GAAUA,IAiGlDK,EAAUC,IAAOC,IAAV,KAMPC,EAAiBF,YAAOG,IAAPH,CAAH,IAEIjB,EAAapB,YAI/ByC,EAAgBJ,YAAOK,IAAPL,CAAH,KAGG,qBAAGlB,QACdC,EAAarB,OAGlB4C,EAAkBN,YAAOK,IAAPL,CAAH,KAKfO,EAAaP,YAAOQ,IAAPR,CAAH,KAIVS,EAAYT,YAAOQ,IAAPR,CAAH,KAITU,EAAUV,YAAOQ,IAAPR,CAAH,KAIPW,EAAkBX,YAAOY,IAAPZ,CAAH,KAIfa,EAAab,IAAOc,KAAV,KAQDC,EA9IG,WAAO,IAAD,EACIC,IAAMhD,WADV,mBACfiD,EADe,KACRC,EADQ,OAGIpD,IAHJ,mBAGfqD,EAHe,KAGRC,EAHQ,OAIUtD,EAAS,GAJnB,mBAIfuD,EAJe,KAILC,EAJK,OAKMxD,EAAS,IALf,mBAKfyD,EALe,KAKPC,EALO,OAMgB1D,EAAS,GANzB,mBAMf2D,EANe,KAMFC,EANE,OAOY5D,EAAS,GAPrB,mBAOf6D,EAPe,KAOJC,EAPI,KAShBC,EAAuBb,IAAM5C,aACjC,SAACC,GACCA,EAAEyD,iBAIF,IAFA,IAAMC,EAAW,GAERC,EAAI,EAAGA,EAAIb,EAAOa,IACzBD,EAASE,KAAK,CACZ5C,IAAKE,EAAwB8B,EAAUE,GACvCpC,IAAKI,EAAwB8B,EAAUE,GACvCjC,IAAKC,EAAwB8B,EAAUE,GACvCtC,IAAKM,EAAwB8B,EAAUE,GACvCrC,cAAeK,EAAwBkC,EAAaE,GACpDvC,aAAcG,EAAwBkC,EAAaE,KAIvDT,EAASa,KAEX,CAACZ,EAAOE,EAAUE,EAAQE,EAAaE,IAGzC,OACE,kBAAC5B,EAAD,KACE,kBAACc,EAAD,CAAYqB,SAAUL,GACpB,kBAACtB,EAAD,CAAY4B,MAAM,QAAQC,KAAK,SAASC,SAAUjB,IAClD,kBAACX,EAAD,CACE0B,MAAM,mBACNC,KAAK,SACLC,SAAUf,EACVrD,MAAOoD,IAET,kBAACX,EAAD,CACEyB,MAAM,iBACNC,KAAK,SACLC,SAAUb,EACVvD,MAAOsD,IAET,kBAACd,EAAD,CACE0B,MAAM,iBACNC,KAAK,SACLC,SAAUX,EACVzD,MAAOwD,IAET,kBAACf,EAAD,CACEyB,MAAM,eACNC,KAAK,SACLC,SAAUT,EACV3D,MAAO0D,IAET,kBAAChB,EAAD,CACE2B,QAAST,EACTU,QAAQ,WACRzD,MAAM,UACNsD,KAAK,UAJP,aASDnB,GACC,kBAACuB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACtC,EAAA,EAAD,KACGvB,EAAQ8D,KAAI,gBAAG7D,EAAH,EAAGA,MAAOC,EAAV,EAAUA,MAAV,OACX,kBAACsB,EAAD,CAAeuC,IAAK9D,EAAOC,MAAOA,GAC/BD,QAKT,kBAAC+D,EAAA,EAAD,KACG3B,EAAMyB,KAAI,SAACG,EAAMC,GAAP,OACT,kBAAC5C,EAAD,CAAgByC,IAAKG,GAClBlE,EAAQ8D,KAAI,gBAAG7D,EAAH,EAAGA,MAAOG,EAAV,EAAUA,KAAV,OACX,kBAACsB,EAAD,CAAiBqC,IAAK9D,GAAQG,EAAK6D,e,gHCxIrD,IAAME,EAAcC,YAAH,KAsBFC,MAhBf,WACE,OACE,oCACE,kBAACC,EAAA,EAAD,MACA,kBAACH,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOI,KAAK,KACV,kBAAC,EAAD,WCTNC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,MCzFjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDWnB,SAAkBtB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIsB,IAAIC,qBAAwB9B,OAAOC,SAAS8B,MACpDC,SAAWhC,OAAOC,SAAS+B,OAIvC,OAGFhC,OAAOiC,iBAAiB,QAAQ,WAC9B,IAAM5B,EAAK,UAAMyB,qBAAN,sBAEPhC,IAgEV,SAAiCO,EAAOC,GAEtC4B,MAAM7B,EAAO,CACX8B,QAAS,CAAE,iBAAkB,YAE5BzB,MAAK,SAAC0B,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CjC,UAAUC,cAAciC,MAAM/B,MAAK,SAACC,GAClCA,EAAa+B,aAAahC,MAAK,WAC7BV,OAAOC,SAAS0C,eAKpBvC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAyB,CAAwBvC,EAAOC,GAI/BC,UAAUC,cAAciC,MAAM/B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OCjC/BE,K","file":"static/js/main.bc58264b.chunk.js","sourcesContent":["export default {\n  palette: {\n    blue: '#2196f3',\n    red: '#f44336',\n    green: '#8bc34a',\n    yellow: '#ffc107',\n    white: '#ffffff',\n    light_grey: '#eeeeee',\n    blue_grey: '#78909c',\n    pink: '#e91e63',\n  },\n};\n","import { useState, useCallback } from 'react';\n\nconst useInput = (initialValue) => {\n  const [value, setValue] = useState(initialValue);\n\n  const setInput = useCallback((e) => setValue(e.target.value), []);\n\n  const clear = useCallback(() => setValue(''), []);\n\n  return [value, setInput, setValue, clear];\n};\n\nexport default useInput;\n","import React from 'react';\nimport styled from 'styled-components';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport vars from '../utils/style/vars';\nimport { useInput } from '../utils/hooks';\n\nconst getStatModifier = (stat) => {\n  return Math.ceil((stat - 10) / 2);\n};\n\nconst columns = [\n  {\n    title: 'Armor class',\n    color: vars.palette.blue_grey,\n    data: ({ dex }) => {\n      return 10 + getStatModifier(dex);\n    },\n  },\n  {\n    title: 'Attack modifier',\n    color: vars.palette.pink,\n    data: ({ dex, weaponAbility }) => {\n      return getStatModifier(dex) + weaponAbility;\n    },\n  },\n  {\n    title: 'Strength',\n    color: vars.palette.red,\n    data: ({ str }) => getStatModifier(str),\n  },\n  {\n    title: 'Cast modifier',\n    color: vars.palette.blue,\n    data: ({ magicAbility, int }) => {\n      return getStatModifier(int) + magicAbility;\n    },\n  },\n  {\n    title: 'Health',\n    color: vars.palette.green,\n    data: ({ end }) => {\n      return 5 * end;\n    },\n  },\n];\n\nconst generateRandomFromRange = (min, max) => {\n  const minInt = parseFloat(min);\n  const maxInt = parseFloat(max);\n\n  return Math.round(Math.random() * (maxInt - minInt) + minInt);\n};\n\nconst IndexPage = () => {\n  const [stats, setStats] = React.useState();\n\n  const [count, setCount] = useInput();\n  const [fromStat, setFromStat] = useInput(7);\n  const [toStat, setToStat] = useInput(15);\n  const [fromAbility, setFromAbility] = useInput(0);\n  const [toAbility, setToAbility] = useInput(3);\n\n  const generateStatsHandler = React.useCallback(\n    (e) => {\n      e.preventDefault();\n\n      const newStats = [];\n\n      for (let i = 0; i < count; i++) {\n        newStats.push({\n          int: generateRandomFromRange(fromStat, toStat),\n          str: generateRandomFromRange(fromStat, toStat),\n          end: generateRandomFromRange(fromStat, toStat),\n          dex: generateRandomFromRange(fromStat, toStat),\n          weaponAbility: generateRandomFromRange(fromAbility, toAbility),\n          magicAbility: generateRandomFromRange(fromAbility, toAbility),\n        });\n      }\n\n      setStats(newStats);\n    },\n    [count, fromStat, toStat, fromAbility, toAbility]\n  );\n\n  return (\n    <Wrapper>\n      <StyledForm onSubmit={generateStatsHandler}>\n        <CountInput label=\"Count\" type=\"number\" onChange={setCount} />\n        <FromInput\n          label=\"From (main stat)\"\n          type=\"number\"\n          onChange={setFromStat}\n          value={fromStat}\n        />\n        <ToInput\n          label=\"To (main stat)\"\n          type=\"number\"\n          onChange={setToStat}\n          value={toStat}\n        />\n        <FromInput\n          label=\"From (ability)\"\n          type=\"number\"\n          onChange={setFromAbility}\n          value={fromAbility}\n        />\n        <ToInput\n          label=\"To (ability)\"\n          type=\"number\"\n          onChange={setToAbility}\n          value={toAbility}\n        />\n        <GenereateButton\n          onClick={generateStatsHandler}\n          variant=\"outlined\"\n          color=\"primary\"\n          type=\"submit\"\n        >\n          Generate\n        </GenereateButton>\n      </StyledForm>\n      {stats && (\n        <Table>\n          <TableHead>\n            <TableRow>\n              {columns.map(({ title, color }) => (\n                <HeadTableCell key={title} color={color}>\n                  {title}\n                </HeadTableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {stats.map((item, idx) => (\n              <StyledTableRow key={idx}>\n                {columns.map(({ title, data }) => (\n                  <StyledTableCell key={title}>{data(item)}</StyledTableCell>\n                ))}\n              </StyledTableRow>\n            ))}\n          </TableBody>\n        </Table>\n      )}\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  max-width: 1280px;\n  margin: 0 auto;\n  padding: 10px;\n`;\n\nconst StyledTableRow = styled(TableRow)`\n  &:nth-child(2n) {\n    background-color: ${vars.palette.light_grey};\n  }\n`;\n\nconst HeadTableCell = styled(TableCell)`\n  width: 150px;\n  font-weight: bold;\n  background-color: ${({ color }) => color};\n  color: ${vars.palette.white};\n`;\n\nconst StyledTableCell = styled(TableCell)`\n  width: 150px;\n  font-size: 16px;\n`;\n\nconst CountInput = styled(TextField)`\n  grid-column: 1 / 3;\n`;\n\nconst FromInput = styled(TextField)`\n  grid-column: 1 / 2;\n`;\n\nconst ToInput = styled(TextField)`\n  grid-column: 2 / 3;\n`;\n\nconst GenereateButton = styled(Button)`\n  grid-column: 1 / 3;\n`;\n\nconst StyledForm = styled.form`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 10px;\n  max-width: 500px;\n  margin: 0 auto 20px auto;\n`;\n\nexport default IndexPage;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { createGlobalStyle } from 'styled-components';\n\nimport Index from './pages';\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    box-sizing: border-box;\n  }\n`;\n\nfunction App() {\n  return (\n    <>\n      <CssBaseline />\n      <GlobalStyle />\n      <Router>\n        <Switch>\n          <Route path=\"/\">\n            <Index />\n          </Route>\n        </Switch>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nimport * as serviceWorker from './utils/serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}